// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest

#include <ngrest/db/SQLiteDb.h>
#include <ngrest/db/DbManager.h>
#include <ngrest/db/Table.h>

#include "Vehicles.h"

#include<iostream>

// singleton to access notes db
class Inventory: public ::ngrest::DbManager< ::ngrest::SQLiteDb >
{
public:
    static Inventory& inst() {
        static Inventory instance;
        return instance;
    }

private:
    Inventory() : DbManager("carsmfr.db") {
        // create tables: vtable, mtable
        createAllTables(); 
    }
};

// table aliases
ngrest::Table<Vehicle> vInventory = Inventory::inst().getTable<Vehicle>();
ngrest::Table<Manufacturer> mInventory = Inventory::inst().getTable<Manufacturer>();

int Vehicles::addVehicle(const Vehicle& vehicle, const std::string& make, const std::string& country) {
    if(make.empty() || country.empty())
        return -1;

    int vid = vInventory.insert({0, vehicle.color, vehicle.year, vehicle.model, vehicle.vin})
                        .lastInsertId();

    std::string comment;
    if (make == "Tesla")
        comment = " \"Batteries Included!\" ";
    else if (make == "BMW")
        comment = std::string("\xAE").append(" BMW AG").c_str();

    mInventory.insert({0, make, country, vid, comment.c_str()}).lastInsertId();

    return vid;
}

#include<sstream>
std::list<std::string> vmJoin(std::list<Vehicle> vList) {

    std::list<std::string> vm;
    for (const Vehicle& vItem : vList) {    
        std::stringstream ss;
        ss << "{";
        ss << vItem.id << ",";
        ss << " " << vItem.color << ",";
        ss << " " << vItem.year << ",";
        ss << " " << vItem.model << ",";
        ss << " " << vItem.vin << ",";

        const Manufacturer& mfr = mInventory.selectOne("vehicleId = ?", vItem.id);
        ss << " " << mfr.make << ",";
        ss << " " << mfr.country << ",";
        ss << " " << mfr.comment;
        ss << "}";

        vm.push_back(ss.str());
    }

    return vm;
}

std::list<std::string> Vehicles::getAll() {
    return vmJoin(vInventory.select());
}

std::list<std::string> Vehicles::get(const int id) {
    std::list<Vehicle> vlist;
    vlist.push_back(vInventory.selectOne("id = ?", id)) ;
    
    return vmJoin(vlist);
}

std::list<std::string> Vehicles::getByYear(const std::string& year) {
    if (year.empty())
        return std::list<std::string>();

    return vmJoin(vInventory.select("year LIKE ?", "%" + year + "%"));
}

std::list<Vehicle> Vehicles::getByMake(const std::string& make) {
    if (make.empty())
        return std::list<Vehicle>();

    std::list<Manufacturer> mlist = mInventory.select("make LIKE ?", "%" + make + "%");

    std::list<Vehicle> vlist;
    for (const Manufacturer& item : mlist) {
        vlist.push_back(vInventory.selectOne("id = ?", item.vehicleId));
    }

    return vlist;
}

std::list<Manufacturer> Vehicles::getMtable() {
    return mInventory.select();
}

void Vehicles::remove(int id) {
    vInventory.deleteWhere("id = ?", id);
}
