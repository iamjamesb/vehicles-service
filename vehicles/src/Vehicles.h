// This file generated by ngrestcg
// For more information, please visit: https://github.com/loentar/ngrest

#ifndef VEHICLES_H
#define VEHICLES_H

#include <map>
#include <unordered_map>
#include <list>
#include <tuple>
#include <ngrest/common/Service.h>

// *table: vtable
struct Vehicle {

    // *pk: true
    // *autoincrement: true
    int id;

    std::string color;
    std::string year;
    std::string model;
    
    // *unique: true
    std::string vin;
};

// *table: mtable
struct Manufacturer {
    // *pk: true
    // *autoincrement: true
    int id;

    std::string make;
    std::string country;

    // forms relation between tables
    // *fk: vtable id
    // *onUpdate: cascade
    // *onDelete: cascade
    int vehicleId;

    // *hidden: implicitelyhiddenmissing
    std::string comment;
};

// *location: vehicles
class Vehicles: public ngrest::Service
{
public:
    // To invoke this operation from browser open: http://localhost:9098/vehicles/World!
    //
    // '*location' metacomment sets path to operation relative to service operation.
    // Default value is operation name.
    // This will bind "echo" method to resource path: http://host:port/vehicles/{text}
    //
    // '*method' metacomment sets HTTP method for the operation. GET is default method.

    // create vehicle and manufacturer table entries 
    // *method: POST
    // *location: /{make}/{country}
    int addVehicle(const Vehicle& vehicle, const std::string& make, const std::string& country);

    // retrieve all vehicles/mfr
    // *method: GET
    // *location: /
    std::list<std::string> getAll();

    // retrieve vehicle/mfr per vehicle table id
    // *method: GET
    // *location: /{id}
    std::list<std::string> get(const int id);

    // retrieve all vehicles/mfr per specified year
    // *method: GET
    // *location: /year/{year}
    std::list<std::string> getByYear(const std::string& year);

    // retrieve all vehicles per specified manufacturer
    // *method: GET
    // *location: /make/{make}
    std::list<Vehicle> getByMake(const std::string& make);

    // retrieve mfr table entries
    // *method: GET
    // *location: /mtable
    std::list<Manufacturer> getMtable();

    // delete vehicle/mfr per vehicle table id
    // *method: DELETE
    // *location: /{id}
    void remove(int id);
};


#endif // VEHICLES_H



